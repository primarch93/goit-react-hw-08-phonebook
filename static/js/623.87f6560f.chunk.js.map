{"version":3,"file":"static/js/623.87f6560f.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactEditForm/ContactEditForm.styled.js","components/ContactEditForm/ContactEditForm.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.js","utils/getInitials.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/AddContactForm/AddContactForm.styled.js","components/AddContactForm/AddContactForm.js","components/ContactFilter/ContactFilter.styled.js","components/ContactFilter/ContactFilter.js","pages/ContactsPage.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filterValue) => {\n    return contacts.filter(contact => {\n      return (\n        contact.name.toLowerCase().includes(filterValue.toLowerCase().trim()) ||\n        contact.number.includes(filterValue.toLowerCase().trim())\n      );\n    });\n  }\n);\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n","import styled from 'styled-components';\nimport { MdEdit } from 'react-icons/md';\n\nexport const EditIcon = styled(MdEdit)`\n  font-size: 20px;\n  color: #28c38a;\n  opacity: 0.8;\n`;\n\nexport const EditBtn = styled.button`\n  align-items: center;\n  border-radius: 4px;\n  display: flex;\n  height: 32px;\n  width: 32px;\n  justify-content: center;\n  border: none;\n  cursor: pointer;\n  background-color: transparent;\n\n  :hover,\n  :focus {\n    > ${EditIcon} {\n      opacity: 1;\n    }\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editContact } from '../../redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport Form from 'react-bootstrap/Form';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\nimport Modal from 'react-bootstrap/Modal';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { EditIcon, EditBtn } from './ContactEditForm.styled';\n\nexport function ContactEditForm({ contact }) {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const dispatch = useDispatch();\n  const items = useSelector(selectContacts);\n\n  const handleEditWord = event => {\n    event.preventDefault();\n    const name = event.currentTarget.name.value;\n    const number = event.currentTarget.number.value;\n\n    const itemsWithoutContact = items.filter(item => item !== contact);\n\n    const isContactExist = itemsWithoutContact.some(\n      contact => contact.name === name || contact.number === number\n    );\n    if (isContactExist) {\n      toast.error(\n        <p>\n          <span style={{ color: 'red' }}>{name}</span> is already in the list!\n        </p>\n      );\n      return;\n    }\n\n    if (contact.name === name && contact.number === number) {\n      toast.warning(\n        <p>\n          You did not change contact{' '}\n          <span style={{ color: 'orange' }}>{contact.name}</span>!\n        </p>\n      );\n    }\n\n    dispatch(editContact({ id: contact.id, contact: { name, number } }));\n    event.currentTarget.reset();\n    handleClose();\n  };\n\n  return (\n    <>\n      <EditBtn type=\"button\" onClick={handleShow}>\n        <EditIcon />\n      </EditBtn>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton style={{ border: 'none' }}>\n          <Modal.Title>Edit the contact</Modal.Title>\n        </Modal.Header>\n        <Form onSubmit={handleEditWord}>\n          <Form.Group\n            controlId=\"contactToEdit\"\n            style={{\n              padding: '10px',\n              display: 'flex',\n              displayWrap: 'nowrap',\n              gap: '5px',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <InputGroup hasValidation>\n              <FloatingLabel\n                controlId=\"floatingContactToEdit\"\n                label=\"Edit the contact name\"\n              >\n                <Form.Control\n                  type=\"text\"\n                  name=\"name\"\n                  defaultValue={contact.name}\n                  placeholder=\"Primarh93\"\n                  autoFocus\n                  required\n                />\n              </FloatingLabel>\n            </InputGroup>\n            <InputGroup hasValidation>\n              <FloatingLabel\n                label=\"Edit the phone number\"\n                controlId=\"floatingNumber\"\n              >\n                <Form.Control\n                  type=\"text\"\n                  name=\"number\"\n                  defaultValue={contact.number}\n                  required\n                  placeholder=\"+38 000 000 00 00\"\n                />\n              </FloatingLabel>\n            </InputGroup>\n          </Form.Group>\n          <Modal.Footer style={{ border: 'none' }}>\n            <Button variant=\"secondary\" onClick={handleClose} type=\"button\">\n              Close\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Save\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </>\n  );\n}\n\nContactEditForm.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Avatar = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 35px;\n  min-height: 35px;\n  border-radius: 50%;\n  color: white;\n`;\n\nexport const Button = styled.button`\nborder-radius:15px;\n  border: none;\n  color:white;\n  cursor: pointer;\n  opacity: 1;\n  :hover,\n  :focus {\n    opacity: 1;\n    /*  color: #27496b; */\n  }\n`;\n\nexport const Link = styled.a`\n  background-color: transparent;\n  cursor: pointer;\n  opacity: 0.7;\n  :hover,\n  :focus {\n    opacity: 1;\n  }\n  :visited {\n    opacity: 0.7;\n  }\n`;\n\nexport const TableHead = styled.th`\n  padding: 15px;\n  font-size: 16px;\n  color: black;\n  font-weight: 400;\n`;\n\nexport const TableRow = styled.tr`\n  background-color: transparent;\n  transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    background-color: #ddedff;\n  }\n  border-bottom: 1px solid black;\n\n`;\n\nexport const NumberCeil = styled.td`\n   padding: 10px;\n  /*   padding-left: 10px;\n */\n  text-align: left;\n`;\n\nexport const NameCeil = styled.td`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 10px 15px;\n  text-align: center;\n  /*   justify-content: center; */\n`;\n\nexport const ActionCeil = styled.td`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 10px;\n  text-align: center;\n  justify-content: center;\n`;\n","import { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { RiDeleteBinLine } from 'react-icons/ri';\nimport { BsStar, BsStarFill } from 'react-icons/bs';\nimport { getInitials } from '../../utils/getInitials';\nimport { ContactEditForm } from '.././ContactEditForm/ContactEditForm';\nimport {\n  TableRow,\n  Avatar,\n  NameCeil,\n  NumberCeil,\n  ActionCeil,\n  Button,\n} from './ContactItem.styled';\n\nexport const ContactItem = ({ contacts }) => {\n  const dispatch = useDispatch();\n  const [favourites, setFavourites] = useState(\n    () => JSON.parse(localStorage.getItem('favourites')) ?? []\n  );\n\n  useEffect(() => {\n    localStorage.setItem('favourites', JSON.stringify(favourites));\n  }, [favourites]);\n\n  const onDelete = contact => {\n    dispatch(deleteContact(contact.id));\n    toast.success(\n      <p>\n        Contact <span style={{ color: 'green' }}>{contact.name}</span> deleted!\n      </p>\n    );\n  };\n\n  const onFavorite = contact => {\n    if (favourites.find(fav => fav.id === contact.id)) {\n      setFavourites(favourites.filter(fav => fav.id !== contact.id));\n      toast.success(\n        <p>\n          Contact <span style={{ color: 'green' }}>{contact.name}</span> removed\n          from favorites!\n        </p>\n      );\n    } else {\n      setFavourites([...favourites, contact]);\n      toast.success(\n        <p>\n          Contact <span style={{ color: 'green' }}>{contact.name}</span> added\n          to favorites!\n        </p>\n      );\n    }\n  };\n\n  return contacts.map(contact => {\n    return (\n      <TableRow key={contact.id}>\n        <NameCeil>\n          <Avatar>{getInitials(contact.name)}</Avatar>\n          {contact.name}\n        </NameCeil>\n        <NumberCeil>{contact.number}</NumberCeil>\n        <ActionCeil>\n          <Button type=\"button\" onClick={() => onFavorite(contact)}>\n            {favourites.find(fav => fav.id === contact.id) ? (\n              <BsStarFill size={24} color=\"#ffd800\" />\n            ) : (\n              <BsStar size={24} color=\"#ffd800\" />\n            )}\n          </Button>\n\n          <ContactEditForm contact={contact} />\n\n          <Button type=\"button\" onClick={() => onDelete(contact)}>\n            <RiDeleteBinLine size={24} color=\"red\" />\n          </Button>\n        </ActionCeil>\n      </TableRow>\n    );\n  });\n};\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","export const getInitials = contactName => {\n  return contactName\n    .split(' ')\n    .map(name => name.slice(0, 1).toUpperCase())\n    .slice(0, 2)\n    .join('');\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n   width: 100%;\n  border-collapse: collapse;\n  padding: 10px;\n  margin-top: 20px;\n`;\n\nexport const TableHead = styled.th`\n   padding: 15px;\n  font-size: 16px;\n  color: black;\n  font-weight: 400;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilterValue,\n} from '../../redux/contacts/selectors';\nimport { toast } from 'react-toastify';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { Table, TableHead } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const filter = useSelector(selectFilterValue);\n  const contacts = useSelector(selectContacts);\n\n  const handleFilterContact = () => {\n    const noFilteredContacts =\n      contacts.filter(contact => {\n        return (\n          contact.name.toLowerCase().includes(filter.toLowerCase().trim()) ||\n          contact.number.includes(filter.trim())\n        );\n      }).length === 0;\n    if (filter && noFilteredContacts) {\n      toast.error(\n        <p>\n          Sorry, there are no contact matching\n          <span style={{ color: 'red' }}> {filter}</span>!\n        </p>,\n        {\n          toastId: 'dont-duplicate-pls',\n        }\n      );\n    }\n\n    return contacts\n      .filter(contact => {\n        return (\n          contact.name.toLowerCase().includes(filter.toLowerCase().trim()) ||\n          contact.number.includes(filter.trim())\n        );\n      })\n      .sort((firstContact, secondContact) =>\n        firstContact.name.localeCompare(secondContact.name)\n      );\n  };\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <TableHead>Name</TableHead>\n          <TableHead>Phone number</TableHead>\n          <TableHead>\n            {contacts.length}\n            <span> {contacts.length === 1 ? 'contact' : 'contacts'}</span>\n          </TableHead>\n        </tr>\n      </thead>\n      <tbody>\n        <ContactItem contacts={handleFilterContact()} />\n      </tbody>\n    </Table>\n  );\n};\n","import styled from 'styled-components';\nimport { Field, Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px 20px 0;\n`;\n\nexport const Label = styled.label`\n  font-size: 24px;\nfont-weight: 500;\n`;\n\nexport const InputContainer = styled.div`\n   display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n  gap: 15px;\n`;\n\nexport const StyledField = styled(Field)`\n  display: flex;\nflex-direction: column;\n\n`;\n\nexport const Button = styled.button`\n width: 300px;\nheight: 30px;\nfont-size: 18px;\nborder-radius:10px;\nmargin:20px;\ncolor:white;\nbackground-color:#6aa0d6;\n:hover {\n  color: #fff;\n  background-color:#27496b;\n}     \n`;\n\nexport const LabelContainer = styled.div`\n  \n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: red;\n  text-align: start;\n  width: 230px;\n  font-size: 16px;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { BiErrorCircle } from 'react-icons/bi';\nimport { toast } from 'react-toastify';\nimport {\n  InputContainer,\n  Button,\n  StyledField,\n  LabelContainer,\n  Form,\n  Error,\n} from './AddContactForm.styled';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Name is too short!')\n    .max(30, 'Name is too long!')\n    .required('Name is required!')\n    .label('Name'),\n  number: Yup.string()\n    .required('Phone number is required!')\n    .label('Number')\n    .matches(\n      /^(\\+?\\d{1,3}[- ]?)?\\d{10}$/,\n      'Please provide a valid phone number!'\n    ),\n});\n\nexport const AddContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const contact = {\n      name: values.name,\n      number: values.number,\n    };\n\n    const contactExists = contacts.some(item => {\n      return item.name === contact.name;\n    });\n    if (contactExists) {\n      toast.warning(\n        <p>\n          Contact <span style={{ color: 'orange' }}>{contact.name}</span>{' '}\n          already exist!\n        </p>\n      );\n      return;\n    }\n    const numberExists = contacts.some(item => {\n      return item.number === contact.number;\n    });\n    if (numberExists) {\n      toast.warning(\n        <p>\n          Number <span style={{ color: 'orange' }}>{contact.number}</span> is\n          already in base!\n        </p>\n      );\n      return;\n    }\n\n    dispatch(addContact(contact));\n\n    toast.success(\n      <p>\n        Contact <span style={{ color: 'green' }}>{contact.name}</span> added!\n      </p>\n    );\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={ContactSchema}\n    >\n      {props => {\n        return (\n          <Form>\n            <InputContainer>\n              <LabelContainer>\n                <div\n                  style={{\n                    display: 'flex',\n                    wtap: 'nowrap',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <label htmlFor=\"name\">Name</label>\n                  <StyledField\n                    id=\"name\"\n                    type=\"text\"\n                    name=\"name\"\n                    required\n                    placeholder=\"Primarh93\"\n                    value={props.values.name}\n                    onChange={props.handleChange}\n                    className={\n                      props.touched.name && props.errors.name ? 'error' : ''\n                    }\n                  />\n                </div>\n                <ErrorMessage name=\"name\">\n                  {msg => (\n                    <Error>\n                      <BiErrorCircle /> {msg}\n                    </Error>\n                  )}\n                </ErrorMessage>\n              </LabelContainer>\n              <LabelContainer>\n                <div\n                  style={{\n                    display: 'flex',\n                    wtap: 'nowrap',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <label htmlFor=\"number\">Number</label>{' '}\n                  <StyledField\n                    id=\"number\"\n                    type=\"tel\"\n                    name=\"number\"\n                    required\n                    placeholder=\"+38 000 000 00 00\"\n                    value={props.values.number}\n                    onChange={props.handleChange}\n                    className={\n                      props.touched.number && props.errors.number ? 'error' : ''\n                    }\n                  />\n                </div>\n                <ErrorMessage name=\"number\">\n                  {msg => (\n                    <Error>\n                      <BiErrorCircle /> {msg}\n                    </Error>\n                  )}\n                </ErrorMessage>\n              </LabelContainer>\n            </InputContainer>\n\n            <Button type=\"submit\">Add contact</Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n  margin-top: 10px;\n`;\nexport const FilterInput = styled.input`\n   padding: 8px;\n  background: transparent;\n  border: 2px solid #6aa0d6;\n  border-radius: 5px;\n  margin-left: 10px;\n  font-size: 16px;\n  &:focus {\n    outline: 1px solid #6aa0d6;\n  }\n`;\n","import { FiSearch } from 'react-icons/fi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from '../../redux/filterSlice';\nimport { selectFilterValue } from '../../redux/contacts/selectors';\nimport { FilterContainer, FilterInput } from './ContactFilter.styled';\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n\n  return (\n    <FilterContainer>\n      <label htmlFor=\"filter\">\n        <FiSearch size={20} />\n      </label>\n      <FilterInput\n        id=\"filter\"\n        type=\"text\"\n        onChange={event => dispatch(setFilterValue(event.target.value))}\n        value={filter}\n        name=\"filter\"\n        placeholder=\"Search contacts\"\n      />\n    </FilterContainer>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { AddContactForm } from 'components/AddContactForm/AddContactForm';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <AddContactForm />\n      <ContactFilter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n      <ToastContainer />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilterValue","filter","selectIsLoading","createSelector","filterValue","contact","name","toLowerCase","includes","trim","number","isLoading","EditIcon","styled","MdEdit","_templateObject","_taggedTemplateLiteral","EditBtn","_templateObject2","ContactEditForm","_ref","_useState","useState","_useState2","_slicedToArray","show","setShow","handleClose","dispatch","useDispatch","useSelector","_jsxs","_Fragment","children","_jsx","type","onClick","Modal","onHide","closeButton","style","border","Form","onSubmit","event","preventDefault","currentTarget","value","item","some","toast","color","editContact","id","reset","controlId","padding","display","displayWrap","gap","justifyContent","alignItems","InputGroup","hasValidation","FloatingLabel","label","defaultValue","placeholder","autoFocus","required","Button","variant","Avatar","TableRow","_templateObject3","_templateObject4","_templateObject5","NumberCeil","_templateObject6","NameCeil","_templateObject7","ActionCeil","_templateObject8","ContactItem","_JSON$parse","JSON","parse","localStorage","getItem","favourites","setFavourites","useEffect","setItem","stringify","map","contactName","split","slice","toUpperCase","join","find","fav","concat","_toConsumableArray","onFavorite","BsStarFill","size","BsStar","deleteContact","onDelete","RiDeleteBinLine","Table","TableHead","ContactList","length","noFilteredContacts","toastId","sort","firstContact","secondContact","localeCompare","handleFilterContact","FormikForm","InputContainer","StyledField","Field","LabelContainer","Error","ContactSchema","Yup","shape","min","max","matches","AddContactForm","Formik","initialValues","values","actions","addContact","resetForm","validationSchema","props","wtap","htmlFor","onChange","handleChange","className","touched","errors","ErrorMessage","msg","BiErrorCircle","FilterContainer","FilterInput","ContactFilter","FiSearch","setFilterValue","target","ContactsPage","fetchContacts","Helmet","ToastContainer"],"sourceRoot":""}